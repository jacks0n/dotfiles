# vim: filetype=sh

# ag / The Silver Searcher shortcuts.
# https://github.com/ggreer/the_silver_searcher.
a()  { ag "$1" "${2:-.}"; }
al() { ag -l "$1" "${2:-.}"; }
ae() {
  # --exclude={.sass-cache,css,js/contrib}
  # grep --colour=always --exclude-dir=css --exclude=\*.{svg,scssc} --line-number --line-buffered -r "" "${2:-.}" | fzf --ansi --select-1 --query="$1" --extended --multi | \
  ag --nobreak --nonumbers --noheading "${2:-.}" | fzf --ansi --select-1 --query="$1" --extended --multi | \
    while read -r grep_line ; do
      filepath="$(echo "$grep_line" | cut -d ':' -f 1)"
      linenum="$(echo "$grep_line" | cut -d ':' -f 2)"
      nvim "${filepath}:${linenum}" 2>/dev/null

    done
}


# find shortcuts, matches highlighted inline.
# Wildcard find, matching *<keyword>*
f() {
  sudo find "${2:-.}" -iname "*$1*" 2>/dev/null | \
    grep -i "$1" | \
    tee /dev/tty | \
    pbcopy
}

# Edit the selected file(s). USAGE: e FUZZY_PATTERN
e() {
  local SELECTED_FILE="$(fzf --query="$1" --select-1 --extended --multi)"
  [ -n "$SELECTED_FILE" ] && open "$SELECTED_FILE"
}


# cd to selected directory (including hidden directories), or directory of selected file. USAGE: d FUZZY_PATTERN [DIRECTORY]
unalias d 2>/dev/null
d() {
  find "${2:-.}" -not -path '*/.git/*' -type d 2>/dev/null | \
    fzf --query="$1" --select-1 --extended | \
      while read -r filepath ; do
        if [ -f "$filepath" ] ; then
          cd "$(dirname "$filepath")" || {
            echo "ERROR: Cannod \`cd\` into '$(dirname "$filepath")'."
            return 1
        }
        elif [ -d "$filepath" ] ; then
          cd "$filepath" || exit 1
        else
          echo "ERROR: Not a file or directory '$filepath'"
        fi
        ls -lFh
      done
}


# `source` the file, if it exists.
source_if_exists() {
  [[ -f "$1" ]] && source "$1"
}



# Say a random joke, with a cow ASCII.
cowjoke() {
  # Modes: Borg, appear dead, greedy, paranoid, stoned, tired, wired, youthful.
  local COWSAY_MODES='bdgpstwy'
  local RANDOM_COWSAY_MODE="${COWSAY_MODES[$RANDOM % ${#COWSAY_MODES[@]}]}"
  cowsay -$RANDOM_COWSAY_MODE "$(pyjoke -c all)"
  # fortune -sa -n 200 | cowsay -$RANDOM_COWSAY_MODE
}


# Recursively change ownerwhip of the path to $USER.
chownme() {
  sudo chown -R "${USER}:staff" "$@"
}


# Fix Homebrew permission errors.
fix-brew-perms() {
  local BREW_DIR="$(brew --repo)"
  [ -z "$BREW_DIR" ] && {
    echo 'ERROR: Brew not found.'
    return 1
  }

  sudo chown -R Jackson:admin /usr/local
  sudo chown -R Jackson:staff /Library/Caches/Homebrew

  find "$BREW_DIR" -type d -name .git | \
    while read -r GIT_DIR; do (
      local DIR="$(realpath "$GIT_DIR/..")"

      if [[ "$DIR" == "$(brew --repo)" ]] ; then
        echo "Resetting Brew repo: $(brew --repo)"
      elif [[ "$DIR" == *"Taps/"* ]] ; then
        echo "Resetting tap: ${DIR#*Taps/}"
      else
        echo "Resetting: $DIR"
      fi

      ( cd "$DIR" || exit 1
        sudo git reset --hard
        sudo git clean -fd )
    )
  done
}


# Commit empty directory workaround for Git.
gitkeep() {
  touch "$1/.gitkeep"
}


# Fix Zsh permission errors.
fix-zsh-permissions() {
  compaudit | xargs -I % sudo chmod g-w "%"
  compaudit | xargs -I % sudo chown root "%"
  rm -f ~/.zcomp*
  compinit
}


# cd to a previously visited directory matching FUZZY_PATTERN
unalias z 2>/dev/null
z() {
  if [[ -z "$@" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')" || exit 1
  else
    _z "$@"
  fi
}

git-maintain() {
  # Verifies the connectivity and validity of the objects in the database.
  git fsck —unreachable

  # Clear reflog information.
  git reflog expire —expire=0 —all

  # Pack unpacked objects.
  git repack -a -d -l

  # Prune all unreachable objects from the object database.
  git prune

  # Cleanup unnecessary files and optimize the local repository.
  git gc —aggressive
}

git-no-assume-changed() {
  # TDOO: check input, combine with `git-assume-changed()`.
  git ls-files -z "${1:-.}" | xargs -0 git update-index --no-assume-unchanged
  git ls-files -z "${1:-.}" | xargs -0 git update-index --no-skip-worktree
  git update-index --really-refresh
}

git-assume-changed() {
  git ls-files -z "${1:-.}" | xargs -0 git update-index --assume-unchanged
  git ls-files -z "${1:-.}" | xargs -0 git update-index --skip-worktree
  git update-index --really-refresh
}


# View `man` pages with Preview.app, fancy!
gman() {
  PS_FILEPATH='/tmp/man-to-ps.ps'

  # Output `man` as Postscript to a temporary file.
  man -t "$@" > "$PS_FILEPATH"
  open "$PS_FILEPATH"
}


# Reload shell - Zsh or Bash.
# Sources ~/.zshrc or ~/.profile by default. If the `--new` argument is given,
# the current shell will be re-launched, disregarding any environment changes.
reload() {
  # Get current shell process name. Compatible with BSD and GNU `ps`.
  ME="$(ps -p $$ -o 'comm=')" # zsh and bash usually prefixed with '-'

  # `--new` specified. Lose changes, start new shell.
  if [[ $1 == '--new' ]] ; then
    [[ $ME == *zsh  ]] && exec zsh -li
    [[ $ME == *bash ]] && exec bash -li
  else
    [[ $ME == *zsh  ]] && source ~/.zshrc
    [[ $ME == *bash ]] && source ~/.bashrc  # Assumes it sources .bash_profile
  fi
}


# Print the public key at ~/.ssh/id_rsa.pub, and copy to the clipboard.
pubkey() {
  if [ -f "$HOME/.ssh/id_rsa.pub" ] ; then
    echo '=> Public key copied to clipboard.'
    tee >(pbcopy) < "$HOME/.ssh/id_rsa.pub"
  else
    echo '=> File ~/.ssh/id_rsa.pub is missing'
  fi
}


# Lists file & directory sizes (defaults to current path), sorted by size.
dl() {
  sudo du --human-readable --total --max-depth=1 "${1:-.}" | sort --human-numeric-sort --reverse
}


todo() {
  echo "$@" >> ~/.todo
}


# Get the public IP address from OpenDNS, print it and copy to clipboard.
ip() {
  local IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
  [ $? -ne 0 ] && return # dig will print the error to stderr.
  echo "$IP" | pbcopy
  echo "=> Public IP: $IP copied to clipboard"
}


# Create directory and `cd` into it.
mkcd() {
  [[ $1 == '' ]] && echo 'ERROR: No directory argument supplied.' && return 1
  mkdir -p "$1" && cd "$1" || exit 1
}


# Get the local IPv4 addres(sses) from ifconfig, and copy to clipboard.
localip() {
  local IPS="$(ifconfig | grep 'inet' | cut -d' ' -f2 | grep -v -e '127.0.0.1' -e '::1')"
  [[ "$IPS" == '' ]] && echo '=> No local IP addresses found'

  # Print all if multiple found.
  if [ "$(echo "$IPS" | wc -l)" -ne 1 ] ; then
    echo -e "=> Multiple IP addresses found:\n$IPS"
  fi

  echo "$IPS" | pbcopy
  echo "=> IP address $IPS copied to clipboard"
}


# Checks if a website is down with downforeveryoneorjustme.com (URL or raw domain).
isdown() {
  # Strip scheme first.
  URL="$(echo "$1" | sed 's/http\(s\|\):\/\///g')"
  curl -s "http://www.downforeveryoneorjustme.com/$URL" | \
    grep 'just you' | \
    php -r 'echo html_entity_decode(trim(strip_tags(fgets(STDIN))));'
  echo
}


# Kill all the tabs in Chrome to free up memory.
# http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
chromekill() {
  pgrep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill
}


# Show the HTTP headers of a given URL.
httpheaders() {
  # Use a fake user-agent (Safari 8.0, OS X), some sites block cURL.
  CURL_USER_AGENT='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/8.0 Safari/600.1.25'
  curl -s -A "$CURL_USER_AGENT" -D - "$1" -o /dev/null
}


# Delete shell history lines containing $1, in $HISTFILE (if set), ~/.zsh_history, ~/.bash_history
rmhist() {
  [ -z "$1" ] && echo 'ERROR: No history string argument to delete.' ; return 1
  for hist in ~/.zsh_history ~/.bash_history $HISTFILE ; do
    echo "HIST: $hist"
    continue
    [ -f "$hist" ] && LC_ALL=C sed -i "/$1/d" "$hist"
  done
}


# Automatically `cd` into last directory in ranger.
# Based on ranger/doc/examples/bash_automatic_cd.sh
# http://ranger.nongnu.org/.
rangercd() {
  tempfile="/tmp/ranger-$$-chosendir"
  ranger --choosedir="$tempfile" "${@:-.}"
  test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n "$(pwd)")" ]; then
    cd -- "$(cat "$tempfile")" || exit 1
  fi
  rm -f -- "$tempfile"
}


# Performs several system-wide maintenance tasks`.
maintain() {
  # Empty trashes on all mounted volumes and the main HDD.
  echo '=> Emptying trash.'
  sudo rm -rfv /Volumes/*/.Trashes
  sudo rm -rfv "$HOME/.Trash"
  sudo rm -rfv /private/var/log/asl/*.asl

  # Clear uTorrent `.torrent` cache.
  echo '=> Clearing uTorrent cache'
  find "$HOME/Library/Application Support/uTorrent" -name '*.torrent' -delete

  # Runs the repair permissions function from the disk utility app,
  echo '=> Repairing global file permissions.'
  sudo diskutil repairPermissions /
}


# Markdown preview. https://github.com/axiros/terminal_markdown_viewer
mdv() {
  "$HOME/bin/vendor/terminal_markdown_viewer/mdv.py" "$@" | less
}


# System-wide update,
update() {
  # Update Vim plugins.
  echo '=> Vim Plug install, update, upgrade, clean.'
  (
    cd "$HOME/.vim/plugged" || exit 1
    find . -maxdepth 1 -mindepth 1 -type 'd' -printf '%f\n' | while read -r VIM_PLUGIN_DIR ; do
      ( [ ! -d "$VIM_PLUGIN_DIR/.git" ] && exit 1
        cd "$VIM_PLUGIN_DIR" || exit 1
        git reset --hard > /dev/null
        git clean -fd    > /dev/null )
    done
  )
  vim +PlugInstall +PlugUpdate +PlugUpgrade +qall
  echo '=> NVim Plug install, update, upgrade, clean.'
  nvim +UpdateRemotePlugins +PlugInstall +PlugUpdate +PlugUpgrade +qall

  # Download latest repo from Homebrew, and update all packages.
  echo '=> Homebrew cleanup, update, repair and link fixes.'
  # fix-brew-perms
  ( sudo brew update &&
    sudo brew upgrade --all
    sudo brew cask cleanup
    sudo brew cleanup -s --prune=now --force &&
    sudo brew prune )

  # Update OS X.
  echo "\n\n=> Running OS X Software Update."
  sudo softwareupdate --install --all

  # Update pip and pip packages.
  sudo -H pip2 install --upgrade pip
  sudo -H pip2 freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 sudo -H pip2 install -U
  sudo -H pip3 install --upgrade pip
  sudo -H pip3 freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 sudo -H pip3 install -U

  # Updating Node.
  echo '=> Updating Node.js'
  sudo npm install npm -g
  sudo npm update -g

  # Update Oh-My-Zsh.
  if type upgrade_oh_my_zsh &>/dev/null ; then
    upgrade_oh_my_zsh
  fi

  # Updating Gem.
  echo "\n\n=> Updating Ruby Gems."
  sudo gem update --system
  sudo gem update
  sudo gem clean

  echo "\n\n=> Done!."
}


ctags-drupal() {
  ctags \
    --exclude='modules/features/*'  \
    --exclude='files/js/js_*.js'    \
    --exclude='contrib'             \
    --languages=-css                \
    --languages=-json
}
