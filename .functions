# ag / The Silver Searcher shortcuts
# https://github.com/ggreer/the_silver_searcher
a()  { ag "$1" "${2:-.}" }
al() { ag -l "$1" "${2:-.}" }
ao() { ag -l "$1" "${2:-.}" --print0 | xargs -0 open }


# find shortcuts, matches highlighted inline
f_no_colour()   { find "${2:-.}" -iname "*$1*" ${*:3} }  # Wildcard find, matching *<keyword>*
f() { f_no_colour $@ | grep "$1" } # Adds colour to the results
ff()  { f "$1" "${2:-.}" -type f } # Only search for files
fd()  { f "$1" "${2:-.}" -type d } # Only search for directories
fo()  { f_no_colour "$1" "${2:-.}" -print0 | xargs -0 open }         # Open all results found
ffo() { f_no_colour "$1" "${2:-.}" -type f -print0 | xargs -0 open } # Open files in search results
fdo() { f_no_colour "$1" "${2:-.}" -type d -print0 | xargs -0 open } # Open directories in search results


# Print the public key at ~/.ssh/id_rsa.pub, and copy to the clipboard
pubkey() {
    if [ -f "$HOME/.ssh/id_rsa.pub" ] ; then
        cat "$HOME/.ssh/id_rsa.pub" | pbcopy
        echo '=> Public key copied to clipboard.'
        cat "$HOME/.ssh/id_rsa.pub"
    else
        echo '=> File ~/.ssh/id_rsa.pub is missing'
    fi
}


# Lists file & directory sizes (defaults to current path), sorted by size
dl() {
    du --human-readable --total --max-depth=1 "${2:-.}" | sort --human-numeric-sort --reverse
}


# Get the public IP address from OpenDNS, print it and copy to clipboard
ip() {
    local IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
    [ $? -ne 0 ] && return # dig will print the error to stderr
    echo $IP | pbcopy
    echo "=> Public IP: $IP copied to clipboard"
}


# Get the local IPv4 addres(sses) from ifconfig, and copy to clipboard
localip() {
    local IPS="$(ifconfig | grep 'inet' | cut -d' ' -f2 | grep -v -e '127.0.0.1' -e '::1')"
    [[ "$IPS" == '' ]] && echo '=> No local IP addresses found'

    # Print all if multiple found
    if [ "$(echo $IPS | wc -l)" -ne 1 ] ; then
        echo -e "=> Multiple IP addresses found:\n$IPS"
    fi

    echo "$IPS" | pbcopy
    echo "=> IP address $IPS copied to clipboard"
}


# Checks if a website is down with downforeveryoneorjustme.com (URL or raw domain)
isdown() {
    curl -s "http://www.downforeveryoneorjustme.com/$1" | \
        grep 'just you' | \
        php -r 'echo html_entity_decode(trim(strip_tags(fgets(STDIN))));'
}


# Kill all the tabs in Chrome to free up memory
# http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
chromekill() {
    ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill
}


# Show the HTTP headers of a given URL
httpheaders() {
    # Use a fake user-agent, some sites block cURL - Safari 8.0, OS X
    CURL_USER_AGENT='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/8.0 Safari/600.1.25'
    curl -s -A "$CURL_USER_AGENT" -D - "$1" -o /dev/null
}


# Performs several system-wide maintenance tasks`
maintain() {
    # Remove duplicates in the "Open With" menu
    echo '=> Removing "Open With" menu duplicates'
    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister \
        -kill -r -domain local -domain system -domain user
    killall Finder

    # Empty trashes on all mounted volumes and the main HDD
    echo '=> Emptying trash'
    sudo rm -rfv /Volumes/*/.Trashes
    sudo rm -rfv "$HOME/.Trash"
    sudo rm -rfv /private/var/log/asl/*.asl

    # Runs the repair permissions function from the disk utility app
    echo '=> Repairing global file permissions'
    diskutil repairPermissions /

    # Fixes the permissions for Homebrew
    echo '=> Restoring /usr/local permission defaults'
    sudo chown -R 'Jackson:admin' /usr/local
}


# System-wide update
update() {
    # For later
    sudo -v

    # Download latest repo from Homebrew, and update all packages
    echo '=> Homebrew cleanup, update, repair and link fixes'
    brew cleanup -s --force
    brew update
    brew upgrade
    brew tap --repair
    brew unlinkapps
    brew linkapps

    # Flush the Directory Service / DNS cache
    echo '=> Flushing the Directory Service / DNS cache'
    dscacheutil -flushcache
    killall -HUP mDNSResponder

    # Update OS X
    echo '=> Running OS X Software Update'
    sudo softwareupdate -i -a

    # Updating Node
    echo '=> Updating Node.js'
    npm update npm -g
    npm update -g

    # Updating Gem
    echo '=> Updating Gem'
    sudo gem update --system
    sudo gem update

    echo '=> Done!'
}
