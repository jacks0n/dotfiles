# vim: filetype=sh

# Helper function to check if a command exists.
command_exists() {
  type "$1" &>/dev/null
}

# ag / The Silver Searcher shortcuts.
# https://github.com/ggreer/the_silver_searcher.
a()  { ag "$1" "${2:-.}"; }
au() { ag -u "$1" "${2:-.}"; }
al() { ag -l "$1" "${2:-.}"; }
ae() {
  ag --nobreak --nonumbers --noheading "${2:-.}" | \
    fzf --ansi --select-1 --query="$1" --extended --multi | \
      while read -r grep_line ; do
        filepath="$(echo "$grep_line" | cut -d ':' -f 1)"
        linenum="$(echo "$grep_line" | cut -d ':' -f 2)"
        $EDITOR "${filepath}:${linenum}" 2>/dev/null
      done
}


# find shortcuts, matches highlighted inline.
# Wildcard find, matching *<keyword>*
f() {
  sudo find "${2:-.}" -iname "*$1*" 2>/dev/null
}


# Edit the selected file(s). USAGE: e FUZZY_PATTERN
e() {
  local SELECTED_FILE="$(fzf --query="$1" --select-1 --extended --cycle $2)"
  [ -f "$SELECTED_FILE" ] && "$VISUAL" "$SELECTED_FILE"
}


# Fuzzy find and edit a file in a Git repo.
ge() {
  local GIT_ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [ ! -d "$GIT_ROOT_DIR" ] ; then
    echo 'ERROR: Not in a Git repo.' >&2
    return 1
  fi

  local SELECTED_FILE="$(git ls-files --full-name | fzf --query="$1" --select-1 --extended --cycle)"
  [ -f "$GIT_ROOT_DIR/$SELECTED_FILE" ] && "$VISUAL" "$GIT_ROOT_DIR/$SELECTED_FILE"
}


# Print all commits in the last day for all Git repositories under the current directory.
git-standup() {
  local ORIGINAL_WORKING_DIRECTORY="$(pwd)"
  local GIT_AUTHOR="$(git config user.name)"

  local DAYS_AGO='1'
  if [[ "$(date '+%a')" == 'Mon' ]] ; then
      DAYS_AGO='3'
  fi

  find "$(pwd)" -type d -name .git | while read GIT_DIR_PATH ; do
    cd "$GIT_DIR_PATH/.."
    local AUTHOR_COMMITS="$(
      git log \
        --graph \
        --pretty=format:'%C(yellow)%h %Cblue%>(12)%ad %Cgreen%<(7)%aN%Cred%d %Creset%s' \
        --since=$DAYS_AGO.days.ago \
        --author="$GIT_AUTHOR" \
        --all
    )"
    if [ ! -z "$AUTHOR_COMMITS" ] ; then
      echo -e "\n=> $(pwd)"
      echo "$AUTHOR_COMMITS"
    fi
  done

  cd "$ORIGINAL_WORKING_DIRECTORY"
}


# Alias for the nearest Symfony `bin/console`.
sc() {
  (
    while true ; do
      local SEARCH_DIR="$(pwd)"
      if [[ $SEARCH_DIR == "$HOME" || $SEARCH_DIR == '/' ]] ; then
        echo 'ERROR: Could not find `app/console`.' 2>&1
        return 1
      fi

      if [ -f 'app/console' ] ; then
        app/console $@
        return
      fi

      cd ..
    done
  )
}


# Fuzzy find and `cd` into a Git repo directory.
gcd() {
  local GIT_ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [ ! -d "$GIT_ROOT_DIR" ] ; then
    echo 'ERROR: Not in a Git repo.' >&2
    return 1
  fi

  local DIR="$GIT_ROOT_DIR/$(
    find ~/drupal-dev-env/web -mindepth 1 -type d -printf '%P\n' | \
      fzf --query="$@"
  )"
  if [ -d "$DIR" ] ; then
    echo "DIR EXISTS!"
    cd "$DIR"
  fi
}


backup() {
  if [ -z "$BACKUP_DIR" ] ; then
    echo '=> ERROR: Environmental variable "$BACKUP_DIR" not set!' >&2
    return 1
  fi

  if hash composer 2>/dev/null ; then
    echo '=> Backing up composer packages.'
    composer global show --name-only --tree 2>/dev/null | \
      grep -v '^[├ │└]' | \
      cut -d' ' -f1 > "$BACKUP_DIR/composer-packages.list"
  fi

  if hash npm 2>/dev/null ; then
    echo '=> Backing up NPM package list.'
    npm list --global --depth=0 | \
      sed 1d | \
      cut -d'@' -f1 | \
      cut -d' ' -f2 | \
      sed '/^$/d' > "$BACKUP_DIR/npm-packags.list"
  fi

  if hash brew 2>/dev/null ; then
    (
      cd "$BACKUP_DIR"
      rm -f Brewfile

      # Backup all packages (with arguments), taps, and casks.
      echo '=> Creating Brewfile bundle.'
      brew bundle --force dump

      # Remove non-top level installed packages (e.g. dependencies).
      # Top-level packages needed on their own that other packages depend on.
      local package_whitelist=(homebrew/php/composer homebrew/php/php-code-sniffer neovim/neovim/neovim homebrew/php/php70)
      local brew_leaves="$(brew leaves)"
      grep '^brew' Brewfile | while read brewfile_line ; do
        local package="$(echo $brewfile_line | cut -d"'" -f2)"
        local package_escaped="$(echo $package | sed -e 's/[\/&]/\\&/g')"
        if [[ ! $(echo "$brew_leaves" | grep "^$package_escaped$") && ! $package_whitelist =~ $package ]] ; then
          echo "=> Removing '$package'"
          sed -i -e "/^brew '$package_escaped'/d" Brewfile
        fi
      done
    )
  fi
}


init() {
  local OS="$(uname --operating-system)"

  # Homebrew.
  if [[ $OS == 'Darwin' && ! $(hash brew 2>/dev/null) ]] ; then
    echo -n 'Install Homebrew (y/n)? '
    read install_homebrew
    if [[ $install_homebrew == 'y' ]] ; then
      echo '=> Installing Homebrew.'
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
  fi

  # Composer.
  if ! hash composer 2>/dev/null ; then
    echo '=> Installing Composer.'
    if [[ $OS == 'Darwin' && $(hash brew 2>/dev/null) ]] ; then
      brew tap homebrew/php
      brew install composer
    else
      wget https://getcomposer.org/installer -O - -q | php -- --quiet
    fi
  fi

  # Node / NPM.
  if [[ $OS == 'Darwin' && ! $(hash node 2>/dev/null) ]] ; then
    echo '=> Installing Node.'
    brew install node
  fi
}


restore() {
  if [ -z "$BACKUP_DIR" ] ; then
    echo '=> ERROR: Environmental variable "$BACKUP_DIR" not set!' >&2
    return 1
  fi

  if hash composer 2>/dev/null ; then
    echo '=> Installing global composer packages.'
    cat "$BACKUP_DIR/npm-packages.list" | while read composer_package ; do
      echo "=> Installing '$composer_package'"
      composer global install "$composer_package"
    done
  fi

  if hash npm 2>/dev/null ; then
    echo '=> Installing NPM packages.'
    cat "$BACKUP_DIR/npm-packages.list" | while read npm_package ; do
      echo "=> Installing '$npm_package'"
      npm --global install "$npm_package"
    done
  fi

  if hash brew 2>/dev/null ; then
    (
      echo '=> Installing Brew tabs, packages and casks.'
      cd "$BACKUP_DIR" && \
      brew bundle
    )
  fi
}

random-joke() {
  local jokes_path="$HOME/.config/jokes.py"
  if [ ! -f "$jokes_path" ] ; then
    mkdir -p "$HOME/.config"
    local curl_output="$(curl 'https://raw.githubusercontent.com/pyjokes/pyjokes/master/pyjokes/jokes_en.py' --silent -o "$jokes_path")"
    if [ $? -ne 0 ] ; then
      echo "=> ERROR: Failed to fetch jokes. $curl_output"
      return 1
    fi
  fi
  echo "
    $(cat ~/.config/jokes.py); import random; print(random.choice(jokes_en['all']))
  " | python -
}


# Random joke, with random rainbow coloured ASCII art.
cowjoke() {
  if command_exists cowsay && command_exists random-joke && command_exists lolcat ; then
    local COWSAY_FILE="$(shuf -n1 -e $(cowsay -l | tail -n +2))"
    random-joke| cowsay -f "$COWSAY_FILE" | lolcat
  fi
}


# Recursively change ownerwhip of the path to $USER.
chownme() {
  sudo chown -R "${USER}:staff" "$@"
}


# Generate the ctags file at the top of a Git repo.
generate-ctags() {
  local GIT_ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [ ! -d "$GIT_ROOT_DIR" ] ; then
    echo 'ERROR: Not in a Git repo.' >&2
    return 1
  fi

  cd "$GIT_ROOT_DIR"
  rm tags
  ctags -R -f tags
}


# cd to a previously visited directory matching FUZZY_PATTERN
unalias z 2>/dev/null
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _z "$@"
  fi
}


git_maintain() {
  # Remove dangling commits/blobs.
  git reflog expire --expire=now --all

  # Verify connectivity and validity of the DB objects.
  git fsck --full --unreachable

  # Cleanup unused branches.
  git remote | xargs --no-run-if-empty git remote prune

  # Re-pack repository objects.
  # @see https://gcc.gnu.org/ml/gcc/2007-12/msg00165.html
  git repack -a -d --depth=250 --window=250

  # Garbage collection.
  git gc --prune=now
}


git_assume_unchanged() {
  # TDOO: check input, combine with `git-assume-changed()`.
  git ls-files -z "${@:-.}" | xargs -0 git update-index --assume-unchanged
  git ls-files -z "${@:-.}" | xargs -0 git update-index --skip-worktree
  git update-index --really-refresh
}


git_no_assume_unchanged() {
  git ls-files -z "${@:-.}" | xargs -0 git update-index --no-assume-unchanged
  git ls-files -z "${@:-.}" | xargs -0 git update-index --no-skip-worktree
  git update-index --really-refresh
}


# View `man` pages with Preview.app, fancy!
gman() {
  local PS_FILEPATH='/tmp/man-to-ps.ps'

  # Output `man` as Postscript to a temporary file.
  man -t "$@" > "$PS_FILEPATH"
  open "$PS_FILEPATH"
}


# Add colours to man pages.
man() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[38;5;246m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man $@
}


# Reload shell - Zsh or Bash.
# Sources ~/.zshrc or ~/.profile by default. If the `--new` argument is given,
# the current shell will be re-launched, disregarding any environment changes.
reload() {
  # Get current shell process name. Compatible with BSD and GNU `ps`.
  ME="$(ps -p $$ -o 'comm=')" # zsh and bash usually prefixed with '-'

  # `--new` specified. Lose changes, start new shell.
  if [[ $1 == '--new' ]] ; then
    [[ $ME == *zsh  ]] && exec zsh -li
    [[ $ME == *bash ]] && exec bash -li
  else
    [[ $ME == *zsh  ]] && source ~/.zshrc
    [[ $ME == *bash ]] && source ~/.bashrc  # Assumes it sources .bash_profile
  fi
}


# Print the public key at ~/.ssh/id_rsa.pub, and copy to the clipboard.
pubkey() {
  if [ -f "$HOME/.ssh/id_rsa.pub" ] ; then
    echo '=> Public key copied to clipboard.'
    tee >(pbcopy) < "$HOME/.ssh/id_rsa.pub"
  else
    echo '=> ERROR: `~/.ssh/id_rsa.pub` is missing'
  fi
}


# Lists file & directory sizes (defaults to current path), sorted by size.
dl() {
  sudo du --human-readable --total --max-depth=1 "${1:-.}" | sort --human-numeric-sort --reverse
}


todo() {
  echo "$@" >> ~/.todo
}


# Get the public IP address from OpenDNS, print it and copy to clipboard.
ip() {
  local IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
  [ $? -ne 0 ] && return # dig will print the error to stderr.
  echo "$IP" | pbcopy
  echo "=> Public IP: $IP copied to clipboard"
}


# Create directory and `cd` into it.
mkcd() {
  [[ $1 == '' ]] && echo 'ERROR: No directory argument supplied.' && return 1
  mkdir -p "$1" && cd "$1" || exit 1
}


# Get the local IPv4 addres(sses) from ifconfig, and copy to clipboard.
localip() {
  local IPS="$(ifconfig | grep 'inet' | cut -d' ' -f2 | grep -v -e '127.0.0.1' -e '::1')"
  [[ "$IPS" == '' ]] && echo '=> No local IP addresses found'

  # Print all if multiple found.
  if [ "$(echo "$IPS" | wc -l)" -ne 1 ] ; then
    echo -e "=> Multiple IP addresses found:\n$IPS"
  fi

  echo "$IPS" | pbcopy
  echo "=> IP address $IPS copied to clipboard"
}


# Checks if a website is down with downforeveryoneorjustme.com (URL or raw domain).
isdown() {
  # Strip scheme first.
  local URL="$(echo "$1" | sed 's/http\(s\|\):\/\///g')"
  curl -s "http://www.downforeveryoneorjustme.com/$URL" | \
    grep 'just you' | \
    php -r 'echo html_entity_decode(trim(strip_tags(fgets(STDIN))));'
  echo
}


# Kill all the tabs in Chrome to free up memory.
chromekill() {
  pgrep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill
}


# Show the HTTP headers of a given URL.
httpheaders() {
  # Use a fake user-agent (Safari 8.0, OS X), some sites block cURL.
  local CURL_USER_AGENT='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/8.0 Safari/600.1.25'
  curl --silent --user-agent "$CURL_USER_AGENT" --dump-header - "$1" --output /dev/null
}


# Delete shell history lines containing $1, in $HISTFILE (if set), ~/.zsh_history, ~/.bash_history
rmhist() {
  [ -z "$1" ] && echo 'ERROR: No history string argument to delete.' ; return 1
  for hist in ~/.zsh_history ~/.bash_history $HISTFILE ; do
    echo "HIST: $hist"
    continue
    [ -f "$hist" ] && LC_ALL=C sed -i "/$1/d" "$hist"
  done
}


# Automatically `cd` into last directory in ranger.
# Based on ranger/doc/examples/bash_automatic_cd.sh
# http://ranger.nongnu.org/.
rangercd() {
  local TEMPFILE="/tmp/ranger-$$-chosendir"
  ranger --choosedir="$TEMPFILE" "${@:-.}"
  test -f "$TEMPFILE" &&
    if [ "$(cat -- "$TEMPFILE")" != "$(echo -n "$(pwd)")" ]; then
    cd -- "$(cat "$TEMPFILE")" || exit 1
  fi
  rm -f -- "$TEMPFILE"
}


# Global and user updates.
update() {
  update-global
  update-user
}


# User wide update.
update-user() {
  # Update Vim plugins.
  if command_exists vim ; then
    echo '=> Vim Plug install, update, upgrade, clean.'
    (
      cd "$HOME/.vim/plugged" || exit 1
      find . -maxdepth 1 -mindepth 1 -type 'd' -printf '%f\n' | while read -r VIM_PLUGIN_DIR ; do
        ( [ ! -d "$VIM_PLUGIN_DIR/.git" ] && exit 1
          cd "$VIM_PLUGIN_DIR" || exit 1
          git reset --hard > /dev/null
          git clean -fd    > /dev/null )
      done
    )
    vim +PlugInstall +PlugUpdate +PlugUpgrade +qall
  fi

  # Update NeoVim plugins.
  if command_exists nvim ; then
    echo '=> NVim Plug install, update, upgrade, clean.'
    nvim +PlugInstall +PlugUpdate +PlugUpgrade +UpdateRemotePlugins +qall
  fi

  # Update zplug and packages.
  if command_exists zplug ; then
    echo "\n\n=> Updating zplug and packages."
    zplug update
  fi

  # Update Composer packages.
  if command_exists composer ; then
    echo "\n\n=> Updating Composer packages."
    composer global update
  fi

  # Update Go packages.
  if command_exists go ; then
    echo "\n\n=> Updating Go packages."
    go get -u all
  fi

  # Update Ruby Gems.
  if command_exists gem ; then
    echo "\n\n Updating Gem packages."
    sudo gem update $(gem list | cut -d ' ' -f 1)
  fi

  # Update `~/bin` repositories.
  find "$HOME/bin/" -maxdepth 1 -type d | while read BIN_DIR ; do
    (
      cd "$BIN_DIR"
      if [ -d .git ] ; then
        echo "\n=> Updating Git repository in '$(pwd)'."
        git fetch --all
        git pull origin --rebase
      fi
      if [ -f composer.json ] ; then
        echo "\n=> Updating Composer packages in '$(pwd)'."
        composer update --quiet
      fi
      if [ -f package.json ] ; then
        echo "\n=> Updating npm packages in '$(pwd)'."
        npm update
      fi
    )
  done

  # Execute the local update function, if it exists.
  if hash _update &>/dev/null ; then
    _update
  fi
}


# Global update.
update-global() {
  # Download latest repo from Homebrew, and update all packages.
  if command_exists brew ; then
    echo '=> Homebrew cleanup, update, repair and link fixes.'
    (
      brew update
      brew upgrade
      brew cask upgrade
      brew cleanup -s --prune=now
      brew prune
    )
  fi

  # Update OS X.
  if command_exists softwareupdate ; then
    echo "\n\n=> Running OS X Software Update."
    sudo softwareupdate --install --all
  fi

  # Update Gem and Gems.
  if command_exists gem ; then
    echo "\n\n=> Updating Ruby Gems."
    sudo gem update --system
    sudo gem update
    sudo gem clean
  fi

  # Update pip (2 and 3) core and packages.
  for PIP in pip2 pip3 ; do
    if command_exists "$PIP" ; then
      echo "\n\n=> Updating $PIP."
      sudo -H "$PIP" install --upgrade pip | \
        grep -v 'Requirement already up-to-date'
      sudo -H "$PIP" freeze --local | \
        grep -v '^\-e' | \
        cut -d = -f 1  | \
        xargs -n1 sudo -H "$PIP" install --upgrade | \
        grep -v 'Requirement already up-to-date'
    fi
  done

  # Update npm and npm packages.
  if command_exists npm ; then
    echo "\n\n=> Updating npm and npm packages."
    npm install npm -g
    npm update -g
  fi

  echo "\n\n=> Done!"
}
